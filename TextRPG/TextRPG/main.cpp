#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <string>
#include <time.h>
#include <Windows.h>
#include <conio.h>

//¾À º¯È¯À» À§ÇÑ º¯¼ö
int SceneState = 0;
//¾À º¯È¯ »ó¼ö
const int Scene_Logo = 0;
const int Scene_Menu = 1;
const int Scene_NewGame = 2;
const int Scene_Menu2 = 3;
const int Scene_SelectField = 4;
const int Scene_InField = 5;
const int Scene_Battle = 6;
const int Scene_Exit = 7;
//ÇöÀç ¸Ê
int MapState = 0;
//¸Ê »ó¼ö
const int Map_Samgir = 0;
const int Map_SmallCave = 1;
const int Map_seaBottom = 2;

const int Job_sword = 0;
const int Job_bow = 1;
const int Job_gun = 2;
//¾ÆÀÌÅÛ Å¸ÀÔ
const int Item_WP = 0;//¹«±â
const int Item_Pro = 1;//¹æ¾î±¸
const int Item_Use = 2;//¼Ò¸ð
const int Item_ETC = 3;//±âÅ¸

const int InvenSize = 20;

const int levelTable[15] = { 50,100,200,400,700,1500,2500,3500,4500,6000,8000,10000,12000,15000,20000 };


typedef struct tagItme
{
	char* name;
	int itemNum;
	int itemType;
	int price;
}ITEM;

typedef struct tagMap
{
	char* name;
	int levelLimit;
	int apearMonster[3];
}Map; //¸Ê Á¤º¸ ±¸Á¶Ã¼
//½ºÅÝ
typedef struct tagStatus
{
	int hp;
	int att;
	int def;
	int quick;
}STATUS;
//¹æ¾î±¸
typedef struct tagProtection
{
	int limitLevel;
	int def;
	ITEM item;
}PROTECTION;

typedef struct tagWeapon
{
	int limitLevel;
	int att;
	ITEM item;
}WEAPON;
typedef struct tagPlayer //ÇÃ·¹ÀÌ¾î ±¸Á¶Ã¼
{
	int level;
	char* name;
	int exp;
	int gold;
	int job;
	int currHp;
	STATUS status;
	WEAPON weapon;
	PROTECTION protection;
}Player;

typedef struct tagSlot
{
	int index;
	ITEM item;
	int count;
}SLOT;

typedef struct tagMonster
{
	char* name;
	int level;
	int Hp;
	int currHP;
	int att;
	int def;
	int quick;
	int exp;
	int gold;
}MONSTER;
typedef struct tagUseItme
{
	int hpRegain;
	int MpRegain;
	ITEM item;
}USETEM;
typedef struct etcItme
{
	char* explain;//¼³¸í
	ITEM item;
}ETCTEM;

Map maps[3];
WEAPON weapons[3];
USETEM useitems[6];
ETCTEM EtcTems[9];
PROTECTION protections[3];
MONSTER monsters[9];

SLOT inventory[InvenSize];
int invenIndex = 0;

void HideCursor();
void SetPosition(int _x, int _y, char* _str, int _Color);
void SetColor(int _Color);
void LogoScene();
void SceneManager();
void MenuScene();
void MenuScene2();
char* SetName();
void SelectFieldScene();
void BattleScene();
void InField();
void showFrame(int w, int h, int startX, int startY);
void allotPoints();
void CreatePlayerScene();
void showPlayer();
void SetCursor(int _x, int _y);
void winUi(int a, int b, int c);
void rewardGain(int a, int b);
int PlayerAttack(MONSTER* p);
int monsAttack(const MONSTER* p);
void showInven();
void WeaponDataInput(int index, int limitLevel, const char* name, int att, const int type, int price)
{
	weapons[index].limitLevel = limitLevel;
	weapons[index].item.name = (char*)name;
	weapons[index].att = att;
	weapons[index].item.itemNum = index;
	weapons[index].item.itemType = type;
	weapons[index].item.price = price;
}
void ProtectionDataInput(int index, int limitLevel, const char* name, int def, const int type, int price)
{
	protections[index].limitLevel = limitLevel;
	protections[index].item.name = (char*)name;
	protections[index].def = def;
	protections[index].item.itemNum = index;
	protections[index].item.itemType = type;
	protections[index].item.price = price;

}
void UseTemDataInput(int index, const char* name, int hpRe, int mpRe, const int type, int price)
{
	useitems[index].hpRegain = hpRe;
	useitems[index].MpRegain = mpRe;
	useitems[index].item.itemNum = index;
	useitems[index].item.itemType = type;
	useitems[index].item.name = (char*)name;
	useitems[index].item.price = price;
}
void EtcTemDataInput(int index, const char* name, const char* expl, const int type, int price)
{
	EtcTems[index].explain = (char*)expl;
	EtcTems[index].item.itemNum = index;
	EtcTems[index].item.itemType = type;
	EtcTems[index].item.name = (char*)name;
	EtcTems[index].item.price = price;
}
void MonsterDataInput(int index, const char* name, int level, int hp, int att, int def, int quick, int exp, int gold)
{
	monsters[index].name = (char*)name;
	monsters[index].level = level;
	monsters[index].Hp = hp;
	monsters[index].att = att;
	monsters[index].def = def;
	monsters[index].quick = quick;
	monsters[index].exp = exp;
	monsters[index].gold = gold;
}
void MapDataInput(int index, const char* name, int levelLimit, int appearMon1, int appearMon2, int appearMon3)
{
	maps[index].name = (char*)name;
	maps[index].levelLimit = levelLimit;
	maps[index].apearMonster[0] = appearMon1;
	maps[index].apearMonster[1] = appearMon2;
	maps[index].apearMonster[2] = appearMon3;
}
void InputInven(ITEM item) //Àü¿ªº¯¼ö inventory¿¡ ¾ÆÀÌÅÛÀ» ³ÖÀ½
{
	for (int i = 0; i < invenIndex; i++)
	{
		//¾ÆÀÌÅÛÀÌ ÀÌ¹Ì ÀÎº¥Åä¸®¿¡ µé¾îÀÖ´ÂÁö È®ÀÎÇÏ´Â ºÎºÐ
		if (inventory[i].item.itemNum == item.itemNum && inventory[i].item.itemType == item.itemType)
		{
			inventory[i].count++;
			inventory[i].index = i;
			return; //countÁõ°¡ÈÄ ÇÔ¼ö Á¾·á
		}
	}
	if (invenIndex < InvenSize - 1)
	{
		inventory[invenIndex].item = item;
		inventory[invenIndex].count++;
		inventory[invenIndex].index = invenIndex;
		invenIndex++;
	}
	else
	{
		printf_s("ÀÎº¥Åä¸®°¡ ²Ë Ã¡½À´Ï´Ù.");
	}
}
void shop();
int buy(ITEM item);
void showBattleInvenUI();
MONSTER* CreateMonster(int index)
{
	MONSTER* p = (MONSTER*)malloc(sizeof(MONSTER));
	p->name = monsters[index].name;
	p->att = monsters[index].att;
	p->def = monsters[index].def;
	p->exp = monsters[index].exp;
	p->Hp = monsters[index].Hp;
	p->level = monsters[index].level;
	p->quick = monsters[index].quick;
	p->exp = monsters[index].exp;
	p->gold = monsters[index].gold;
	p->currHP = p->Hp;

	return p;
}

Player player;

void EquipWeapon(WEAPON w)
{
	if (w.limitLevel <= player.level)
	{
		player.weapon = w;
		player.status.att += w.att;
	}
	else
		printf_s("ÀåÂø ºÒ°¡!");
}
void EquipProtection(PROTECTION p)
{
	if (p.limitLevel <= player.level)
	{
		player.protection = p;
		player.status.def += p.def;
	}
	else
		printf_s("ÀåÂø ºÒ°¡!");
}

int main(void)
{
	srand(time(0));

	//Àåºñ ÃÊ±âÈ­
	WeaponDataInput(0, 1, "Á×µµ", 5, Item_WP, 100);
	WeaponDataInput(1, 5, "È¯µµ", 8, Item_WP, 500);
	WeaponDataInput(2, 10, "Ã»µµ", 12, Item_WP, 1000);
	WeaponDataInput(3, 1, "¼ö·Ã¿ëÈ°", 7, Item_WP, 100);
	WeaponDataInput(4, 5, "¸ñ±Ã", 10, Item_WP, 500);
	WeaponDataInput(5, 10, "Ã¶±Ã", 15, Item_WP, 1000);
	WeaponDataInput(6, 1, "¼ö·Æ ÃÑ", 10, Item_WP, 100);
	WeaponDataInput(7, 5, "Á¶ÃÑ", 15, Item_WP, 500);
	WeaponDataInput(8, 10, "È­½ÂÃÑ", 20, Item_WP, 1000);

	ProtectionDataInput(0, 1, "°¢¸ñ °©¿Ê", 5, Item_Pro, 100);
	ProtectionDataInput(1, 5, "Ã»µ¿ °©¿Ê", 10, Item_Pro, 500);
	ProtectionDataInput(2, 10, "Ã¶ °©¿Ê", 15, Item_Pro, 1000);

	UseTemDataInput(0, "°æ´Ü", 30, 0, Item_Use, 20);
	UseTemDataInput(1, "³»º¹È¯", 100, 0, Item_Use, 100);
	UseTemDataInput(2, "½ÖÈ­Â÷", 150, 0, Item_Use, 200);
	UseTemDataInput(3, "ÆÄ¶û°¡·ç", 0, 20, Item_Use, 30);
	UseTemDataInput(4, "ºñ¾à", 0, 40, Item_Use, 200);
	UseTemDataInput(5, "¾àÈ­Á¦", 0, 80, Item_Use, 300);

	EtcTemDataInput(0, "´Þ°¿", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(1, "Äá", "»ó°æÁãÀÇ ÁÖ½Ä", Item_ETC, 0);
	EtcTemDataInput(2, "Æø½ÅÆø½Å ¼ØÅÐ", "±¸¸®¿ÕÀÇ ¸ðÇÇ", Item_ETC, 0);
	EtcTemDataInput(3, "ºÎ·¯Áø Ã¶Åð", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(4, "ºÎ·¯Áø È°", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(5, "ºÎ·¯Áø µµ³¢", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(6, "ºÎ·¯Áø Á¶ÃÑ", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(7, "ºÎ·¯Áø Ä«Å¸³ª", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);
	EtcTemDataInput(8, "ºÎ·¯Áø ¿Ö°©", "²¿²¿´ßÀÌ Ç°Àº ´Þ°¿", Item_ETC, 0);

	MonsterDataInput(0, "²¿²¿´ß", 1, 30, 5, 5, 5, 30, 20);
	MonsterDataInput(1, "»ó°æÁã", 2, 35, 6, 5, 5, 40, 25);
	MonsterDataInput(2, "±¸¸®¿Õ", 3, 60, 7, 7, 5, 60, 50);
	MonsterDataInput(3, "Ã¶Åðº´»ç", 5, 100, 10, 10, 5, 80, 35);
	MonsterDataInput(4, "³²ÇÑ±Ãº´", 6, 70, 12, 5, 9, 90, 45);
	MonsterDataInput(5, "µµºÎ¼ö", 7, 150, 12, 8, 6, 150, 90);
	MonsterDataInput(6, "Á¶ÃÑ¼ö", 10, 110, 15, 5, 7, 120, 60);
	MonsterDataInput(7, "Ä®ÀâÀÌ", 11, 130, 13, 8, 6, 130, 80);
	MonsterDataInput(8, "»ç¹«¶óÀÌ", 12, 250, 16, 12, 10, 300, 200);

	MapDataInput(0, "ÇÑ¾ç ºÎ±Ù", 1, 0, 1, 2);
	MapDataInput(1, "³²ÇÑ »ê¼º", 5, 3, 4, 5);
	MapDataInput(2, "´ë¸¶µµ", 10, 6, 7, 8);

	InputInven(useitems[0].item);
	InputInven(useitems[3].item);

	// ** Ä¿¼­¸¦ ¾Èº¸ÀÌ°Ô ÇÔ.
	HideCursor();

	// ** ÄÜ¼ÖÃ¢ÀÇ »çÀÌÁî¸¦ ¼³Á¤.
	system("mode con:cols=120 lines=30");

	// ** ÄÝ¼ÖÃ¢ÀÇ ÀÌ¸§À» ¼³Á¤
	system("title È«±æµ¿ Framework v0.6");

	// ** ÀüÃ¼ ¹è°æ»öÀ» º¯°æÇÔ.
	//system("color 70");

	DWORD dwTime = GetTickCount64(); // 1/1000 (1000ºÐÀÇ 1ÃÊ)
	int Delay = 1000;

	int UpCount = 0;

	while (true)
	{
		if (dwTime + Delay < GetTickCount64())
		{
			dwTime = GetTickCount64();

			// ** ÄÜ¼ÖÃ¢¿¡ ÀÖ´Â ¸ðµç ³»¿ëÀ» Áö¿ò.
			system("cls");
			// ** °ÔÀÓ ·çÇÁ
			SceneManager();
		}
	}

	return 0;
}

void HideCursor()
{
	CONSOLE_CURSOR_INFO Info;

	Info.dwSize = 1;// Ä¿¼­ÀÇ Å©±â
	Info.bVisible = false; //Ä¿¼­ÀÇ Ç¥½Ã¿©ºÎ

	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &Info);//ÀÎ¼ö: ÄÜ¼Ö ±âº» ÇÚµé, ÀÎÆ÷ °ª
}

void SceneManager()
{
	switch (SceneState)
	{
	case Scene_Logo:
		LogoScene();
		break;
	case Scene_Menu:
		MenuScene();
		break;
	case Scene_NewGame:
		CreatePlayerScene();
		break;
	case Scene_Menu2:
		MenuScene2();
		break;
	case Scene_SelectField:
		SelectFieldScene();
		break;
	case Scene_InField:
		InField();
		break;
	case Scene_Battle:
		BattleScene();
		break;
	case Scene_Exit:
		exit(NULL);// ** ÇÁ·Î±×·¥ Á¾·á
		break;
	}
}

void LogoScene()
{
	int Width = (120 / 2) - (strlen("      ,gggg,     _,gggggg,_        ,gg,         _,gggggg,_      ") / 2);
	int Height = 10;

	SetPosition(Width, Height + 1, (char*)"      ,gggg,     _,gggggg,_        ,gg,         _,gggggg,_      ", 1);
	SetPosition(Width, Height + 2, (char*)"      d8` `8I   ,d8P``d8P`Y8b,     i8``8i      ,d8P``d8P`Y8b,   ", 2);
	SetPosition(Width, Height + 3, (char*)"      88  ,dP  ,d8'   Y8   `8b,dP  `8,,8'     ,d8'   Y8   `8b,dP", 3);
	SetPosition(Width, Height + 4, (char*)"   8888888P`   d8'    `Ybaaad88P'   `Y88aaad8 d8'    `Ybaaad88P'", 4);
	SetPosition(Width, Height + 5, (char*)"      88       8P       `````Y8      d8````Y8,8P       `````Y8  ", 5);
	SetPosition(Width, Height + 6, (char*)"      88       8b            d8     ,8P     8b8b            d8  ", 6);
	SetPosition(Width, Height + 7, (char*)" ,aa,_88       Y8,          ,8P     dP      Y8Y8,          ,8P  ", 7);
	SetPosition(Width, Height + 8, (char*)"dP` `88P       `Y8,        ,8P' _ ,dP'      I8`Y8,        ,8P'  ", 8);
	SetPosition(Width, Height + 9, (char*)"Yb,_,d88b,,_    `Y8b,,__,,d8P'  `888,,_____,dP `Y8b,,__,,d8P'   ", 9);
	SetPosition(Width, Height + 10, (char*)" `Y8P`  `Y88888   ``Y8888P`'    a8P`Y888888P`    ``Y8888P`'     ", 10);
	SetColor(1);

	Sleep(3000);
	SetPosition(Width + 10, Height + 12, (char*)"°ÔÀÓÀ» ½ÃÀÛÇÏ·Á¸é, EnterÅ°¸¦ ´­·¯ÁÖ¼¼¿ä.", 2);
	char c;
	while (true)
	{
		c = _getch();
		if (c == 13)break;
	}

	SceneState++;
}


void MenuScene()
{
	printf_s("MenuScene\n\n");

	//printf_s("´ÙÀ½ ¾À ¤¡¤¡??\n1. °ÔÀÓ½ÃÀÛ\n2. Á¾·á\nÀÔ·Â : ");
	printf_s("1. »õ·Î½ÃÀÛ\n");
	printf_s("2. ÀÌ¾îÇÏ±â\n");
	printf_s("3. °ÔÀÓÁ¾·á\n");
	int i = 0;
	scanf("%d", &i);

	if (i == 1)
		SceneState++;
	else if (i == 2) SceneState += 2;
	else if (i == 3)
		SceneState = Scene_Exit;
}
//»õ·Î ÇÏ±â ¾À
void CreatePlayerScene()
{
	printf_s("ÀÌ¸§ ÀÔ·Â: ");
	player.name = SetName();
	player.level = 1;
	player.gold = 200;
	player.exp = 0;

	printf_s("\n\nÁ÷¾÷ ¼±ÅÃ\n1. °Ë¼ú»ç\n2. ±Ã¼ú»ç\n3. ÃÑ¼ú»ç");
	int i = 0;
	scanf("%d", &i);

	if (i == 1) player.job = 0;
	if (i == 2) player.job = 1;
	if (i == 3) player.job = 2;

	EquipWeapon(weapons[0]);
	EquipProtection(protections[0]);

	allotPoints();
	player.currHp = player.status.hp;
	SceneState++;
}
//½Å±Ô Ä³¸¯ÅÍ ½ºÅÝ ºÐ¹è
void allotPoints()
{
	if (player.job == Job_sword)
	{
		player.status.att = 50;
		player.status.def = 8;
		player.status.quick = 5;
		player.status.hp = 50;
	}
	else if (player.job == Job_bow)
	{
		player.status.att = 8;
		player.status.def = 5;
		player.status.quick = 6;
		player.status.hp = 40;
	}
	else if (player.job == Job_gun)
	{
		player.status.att = 10;
		player.status.def = 4;
		player.status.quick = 5;
		player.status.hp = 35;
	}
}


void MenuScene2()
{
	printf_s("MenuScene2\n");

	printf_s("\n1. ÇÊµåÅ½Çè\n2. »óÁ¡\n3. ÀÎº¥Åä¸®\n4. ÇÃ·¹ÀÌ¾î Á¤º¸");

	int i = 0;
	scanf("%d", &i);

	if (i == 1)
		SceneState++;
	else if (i == 2) { shop(); }
	else if (i == 3) { showInven(); }
	else if (i == 4)
	{
		showPlayer();
	}

}

void showPlayer()
{
	short startX = 30;
	short startY = 5;


	showFrame(40, 18, startX, startY);
	SetCursor(startX + 3, startY + 2);
	printf_s("ÇÃ·¹ÀÌ¾î ´Ð³×ÀÓ: %s", player.name);

	SetCursor(startX + 2, startY + 3);
	printf_s("·¹º§          : %d", player.level);

	SetCursor(startX + 2, startY + 4);
	printf_s("°æÇèÄ¡        : %d", player.exp);

	SetCursor(startX + 2, startY + 5);
	printf_s("Á÷¾÷          : %d", player.job);

	SetCursor(startX + 2, startY + 6);
	printf_s("°ñµå          : %d", player.gold);

	SetCursor(startX + 2, startY + 7);
	printf_s("Ã¼·Â          : %d", player.status.hp);

	SetCursor(startX + 2, startY + 8);
	printf_s("°ø°Ý·Â        : %d", player.status.att);

	SetCursor(startX + 2, startY + 9);
	printf_s("¹æ¾î·Â        : %d", player.status.def);

	SetCursor(startX + 2, startY + 10);
	printf_s("¼ø¹ß·Â        : %d", player.status.quick);

	SetCursor(startX + 2, startY + 11);
	printf_s("ÀåÂø ¹«±â     : %s", player.weapon.item.name);

	SetCursor(startX + 2, startY + 12);
	printf_s("ÀåÂø ¹æ¾î±¸   : %s", player.protection.item.name);

	SetCursor(startX + 2, startY + 14);
	printf_s("1. Ä³¸¯ÅÍ Á¤º¸Ã¢ ´Ý±â");

	int i = 0;
	scanf("%d", &i);


} //»óÅÂÃ¢ º¸±â
void showInven() //ÀÎº¥Åä¸® º¸±â
{
	short startX = 30;
	short startY = 2;

	showFrame(60, 22, startX, startY);
	for (int i = 0; i < invenIndex; i++)
	{
		SetCursor(startX + 3, startY + 2 + i * 2);
		printf_s("*ÀÌ¸§: %s ", inventory[i].item.name);

		if (inventory[i].item.itemType == Item_Pro)
			printf_s(" Å¸ÀÔ: ¹æ¾î±¸ ");
		else if (inventory[i].item.itemType == Item_WP)
			printf_s(" Å¸ÀÔ: ¹«±â ");
		else if (inventory[i].item.itemType == Item_Use)
			printf_s(" Å¸ÀÔ: ¼Ò¸ðÇ° ");

		printf_s(" °³¼ö: %d", inventory[i].count);
	}

	SetCursor(startX + 2, startY + 18);
	printf_s("1. ÀÎº¥Åä¸® ´Ý±â");

	int i = 0;
	scanf("%d", &i);
}
void showBattleInvenUI()//¹èÆ²¾ÀÀÇ ÀÎº¥Åä¸® ui
{
	int startX = 65, startY = 18;
	showFrame(50, 10, 65, 18);

	SetPosition(startX + 15, startY + 2, (char*)"---  ÀÎº¥Åä¸®  ---", 2);

	for (int i = 0; i < invenIndex; i++)
	{
		if (inventory[i].item.itemType == Item_Use)
		{
			SetCursor(startX + 2, startY + 4 + (i * 2));
			printf_s("* %s  %d È¸º¹ ", useitems[inventory[i].item.itemNum].item.name, useitems[inventory[i].item.itemNum].hpRegain);
		}
	}
}
void BattleInven()
{
	int useTemIndexes[InvenSize];
	for (int i = 0; i < invenIndex; i++)
	{
		if (inventory[i].item.itemType == Item_Use) //»ç¿ë¾ÆÀÌÅÛÀÇ ÀÎµ¦½º¸¸ ÃßÃâ
		{
			useTemIndexes[i] = inventory[i].index;
		}
	}

	showBattleInvenUI();

	while (true)
	{
		int i = 0;
		scanf("%d", &i);

		if (i == 1);
		break;
	}
}
void SelectFieldScene()
{
	printf_s("SelectFieldScene\n\n");

	for (int i = 0; i < 3; i++)
	{
		if (!(maps[i].name == nullptr))
			printf_s("%d. %s\n", i + 1, maps[i].name);
	}

	printf_s("4. µÚ·Î °¡±â\n");
	int i = 0;
	scanf("%d", &i);
	if (i > 0 && i < 4)
	{
		if (maps[i - 1].levelLimit <= player.level)
		{
			MapState = i - 1;
			SceneState++;
		}
		else
			printf_s("·¹º§ Á¦ÇÑ");
	}
	if (i == 4) SceneState--;


}
void InField()
{
	system("cls");

	printf("%s\n", maps[MapState].name);

	printf("1. »ç³É\n2. ÀÎº¥Åä¸®\n3. µÚ·Î°¡±â");

	int i = 0;
	scanf("%d", &i);

	if (i == 1)
	{
		SceneState++;
	}
	else if (i == 2)
	{

	}
	else if (i == 3)
	{
		SceneState--;
	}
	else if (i == 4)
	{
		SceneState--;
	}
}
void BattleScene()
{
	const int attack = 0;
	const int skill = 1;
	const int item = 2;
	const int exit = 3;

	MONSTER* p[5] = { NULL,NULL,NULL,NULL,NULL };

	int x = 10, y = 2; //ÄÜ¼Ö ÁÂÇ¥

	int exp = 0, gold = 0; //ÀüÅõ ½Â¸®ÈÄ º¸»ó

	int apearNum = rand() % 5 + 1;//¸ó½ºÅÍ ÃâÇö ¼ö

	for (int i = 0; i < apearNum; i++)//¸ó½ºÅÍ ÃâÇö
	{
		int hidden = rand() % 100;

		if (hidden < 10) p[i] = CreateMonster(maps[MapState].apearMonster[2]); //°¡Àå °­ÇÑ ¸ó½ºÅÍ
		else if (hidden < 50) p[i] = CreateMonster(maps[MapState].apearMonster[1]); //Áß°£
		else p[i] = CreateMonster(maps[MapState].apearMonster[0]); //°¡Àå ¾àÇÔ
	}

	int PlayCurrHp = player.status.hp;
	showFrame(100, 22, x, y);
	while (true)
	{
		SetCursor(50, 2);
		printf_s("----- ÀüÅõ È­¸é -----");

		int j = 0;
		if (apearNum > 3) j = 0;
		else if (apearNum > 1) j = 15;
		else j = 30;

		for (int i = 0; i < apearNum; i++)
		{

			SetCursor(x + 15 + j + (i * 15), y + 1);
			printf_s("·¹º§:%d", p[i]->level);

			SetCursor(x + 15 + j + (i * 15), y + 2);
			printf_s("ÀÌ¸§:%s", p[i]->name);

			SetCursor(x + 15 + j + (i * 15), y + 3);
			printf_s("                      ");
			SetCursor(x + 15 + j + (i * 15), y + 3);
			printf_s("HP:%d/%d", p[i]->currHP, p[i]->Hp);
		}

		SetCursor(50, y + 15);
		printf_s("·¹º§:%d", player.level);

		SetCursor(50, y + 16);
		printf_s("ÀÌ¸§%s", player.name);

		SetCursor(50, y + 17);
		printf_s("                       ");
		SetCursor(50, y + 17);
		printf_s("HP:%d/%d", player.currHp, player.status.hp);

		SetCursor(50, 26);
		printf_s("1.°ø°Ý   2.½ºÅ³»ç¿ë  3.¾ÆÀÌÅÛ»ç¿ë 4.µµ¸Á°¡±â");

		int i = 0;
		scanf_s("%d", &i);

		if (i == attack) //±âº» °ø°Ý
		{
			SetCursor(50, 26);
			printf_s("                                            ");

			SetCursor(50, 26);
			printf_s("°ø°ÝÇÒ ¸ó½ºÅÍ ÁöÁ¤");

			int i = 0;
			scanf_s("%d", &i);

			if ((i < 6 && i>0) && (p[i - 1] != NULL) && (p[i - 1]->currHP > 0))
			{
				int damage = PlayerAttack(p[i - 1]);

				SetCursor(50, y + 13);
				printf_s("°ø°Ý");
				Sleep(1000);
				SetCursor(50, y + 13);
				printf_s("     ");

				for (int k = 0; k < apearNum; k++)
				{
					if (k == i - 1)//ÇÇ°Ý´çÇÑ ¸ó½ºÅÍ
					{
						SetCursor(x + 15 + j + (k * 15), y + 5);
						printf_s("µ¥¹ÌÁö: %d", damage);
						Sleep(1000);
						SetCursor(x + 15 + j + (k * 15), y + 5);
						printf_s("          ");
					}

					SetCursor(x + 15 + j + (k * 15), y + 3);
					printf_s("         ");
					SetCursor(x + 15 + j + (k * 15), y + 3);
					printf_s("HP:%d/%d", p[k]->currHP, p[k]->Hp);
				}

				for (int k = 0; k < apearNum; k++)
				{
					if (p[k]->currHP > 0)
					{
						damage = monsAttack(p[k]);

						SetCursor(x + 15 + j + (k * 15), y + 5);
						printf_s("°ø°Ý");
						Sleep(1000);
						SetCursor(x + 15 + j + (k * 15), y + 5);
						printf_s("      ");

						SetCursor(50, y + 13);
						printf_s("µ¥¹ÌÁö: %d", damage);
						Sleep(1000);
						SetCursor(50, y + 13);
						printf_s("          ");

						SetCursor(50, y + 17);
						printf_s("HP:%d/%d", player.currHp, player.status.hp);
					}
				}
			}
		}
		else if (i == skill)//½ºÅ³
		{

		}
		else if (i == item)//¾ÆÀÌÅÛ »ç¿ë
		{
			BattleInven();
		}
		else if (i == exit)//µµ¸Á
			break;

		int check = 0;
		for (int i = 0; i < apearNum; i++)
		{
			check += p[i]->currHP;
		}
		if (check == 0)
		{
			for (int i = 0; i < apearNum; i++)
			{
				exp += p[i]->exp;
				gold += p[i]->gold;
			}
			rewardGain(exp, gold);
			break;
		}
	}
	for (int i = 0; i < apearNum; i++)
	{
		free(p[i]);
	}
	SceneState--;
}
int monsAttack(const MONSTER* p)
{
	int damage = 0;
	if (p->att > player.status.def)
		damage = p->att - player.status.def;
	else
		damage = 1;
	if (player.currHp > damage)
		player.currHp -= damage;
	else
		player.currHp = 0;

	return damage;
}

int PlayerAttack(MONSTER* p)
{
	int damage = 0;
	if (player.status.att > p->def)
		damage = player.status.att - p->def;
	else damage = 1;

	if (p->currHP > damage)
		p->currHP -= damage;
	else
		p->currHP = 0;

	return damage;
}
int LevelUp()//·¹º§¾÷À» ÇßÀ¸¸é 1 ¹ÝÈ¯ ¾Æ´Ï¸é 0 ¹ÝÈ¯
{
	int isLevelUp = 0;
	while (levelTable[player.level - 1] < player.exp)
	{
		player.level++;
		isLevelUp = 1;

		if (player.job == 0) //½ºÅÝ ºÐ¹è
		{
			player.status.hp += 10;
			player.status.att += 2;
			player.status.def += 1;
		}
		if (player.job == 1) //½ºÅÝ ºÐ¹è
		{
			player.status.hp += 5;
			player.status.att += 3;
			player.status.def += 1;
		}
		if (player.job == 2) //½ºÅÝ ºÐ¹è
		{
			player.status.hp += 3;
			player.status.att += 4;
			player.status.def += 1;
		}

	}
	return isLevelUp;
}

void winUi(int gold, int exp, int isLevelUp)//ÀÌ°åÀ»¶§ Ç¥½ÃµÇ´Â ui 
{
	int startX = 40, startY = 5;


	showFrame(40, 15, startX, startY);
	SetPosition(startX + 5, startY + 2, (char*)"----------ÀüÅõ º¸»ó----------", 2);

	SetCursor(startX + 5, startY + 4);
	printf_s("* È¹µæ °ñµå   : %d G", gold);

	SetCursor(startX + 5, startY + 6);
	printf_s("* È¹µæ °æÇèÄ¡ : %d EXP", exp);

	if (isLevelUp)
	{
		SetCursor(startX + 5, startY + 8);
		printf_s("* Ä³¸¯ÅÍ ·¹º§ ¾÷!!!!");
	}
	SetCursor(startX + 7, startY + 10);
	printf_s("1. ÀüÅõ °è¼Ó");

	int i = 0;
	scanf_s("%d", &i);
	if (i == 1) BattleScene();
}
void rewardGain(int exp, int gold) //ÇÃ·¹ÀÌ¾î º¸»óÈ¹µæ
{
	player.exp += exp;
	player.gold += gold;

	int isLevelUp = LevelUp();
	winUi(gold, exp, isLevelUp);
}

void SetPosition(int _x, int _y, char* _str, int _Color)
{
	COORD Pos = { _x, _y }; // ÄÜ¼Ö ¼ø¼­½Ö

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);//Ä¿¼­ À§Ä¡ ÀÌµ¿
	SetColor(_Color);

	printf_s("%s", _str);
}

void SetCursor(int _x, int _y)
{
	COORD Pos = { _x, _y }; // ÄÜ¼Ö ¼ø¼­½Ö

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), Pos);//Ä¿¼­ À§Ä¡ ÀÌµ¿
}
//Æø, ³ôÀÌ, ½ÃÀÛÁöÁ¡
void showFrame(int w, int h, int startX, int startY)
{
	for (int i = 0; i < h - 2; i++)
	{
		SetCursor(startX + 1, startY + i + 1);
		for (int j = 0; j < w - 2; j++)
		{
			printf(" ");
		}

	}

	for (int i = 0; i < h; i++)
	{
		SetCursor(startX, startY + i);
		for (int j = 0; j < w; j++)
		{
			if (i == 0 && j == 0)printf_s("¦£");
			else if (i == 0 && j == w - 1)printf_s("¦¤");
			else if (i == (h - 1) && j == 0)printf_s("¦¦");
			else if (i == (h - 1) && j == w - 1)printf_s("¦¥");
			else if (i == 0 || i == h - 1) printf_s("¦¡");
			else if (j == 0 || j == w - 1) printf_s("¦¢");
			else printf_s(" ");
		}
	}
	SetCursor(startX + 1, startY + 1);
}

void SetColor(int _Color)
{
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), _Color); //»ö±ò º¯È¯
}

char* SetName()
{
	// ** scanf ÇÔ¼ö·Î ¹®ÀÚ¿­À» ÀÔ·Â¹Þ±â À§ÇØ ¹®ÀÚ¿­À» ¹ÞÀ»¼öÀÖ´Â ¹è¿­À» ¼±¾ð.
	char Buffer[128] = "";
	// ** ¹®ÀÚ¿­À» ÀÔ·Â ¹ÞÀ½.
	scanf("%s", Buffer);

	// ** ÀÔ·Â ¹ÞÀº°ªÀº ¹è¿­ ÀÌÁö¸¸, ¹ÝÈ¯ °ªÀº Ä³¸¯ÅÍ Æ÷ÀÎÅÍÇüÀÌ¹Ç·Î ¹®ÀÚ¿­À» º¹»çÇá¾ßÇÔ.
	// ** ¹®ÀÚ¿­À» º¹»ç ÇÏ±âÀ§ÇØ Æ÷ÀÎÅÍ°¡ °¡¸£Å°´Â °ø°£¿¡ ÀÔ·Â¹ÞÀº ¹®ÀÚ¿­ÀÌ µé¾Æ°¥¸¸Å­ÀÇ Å©±â·Î ¸Þ¸ð¸® ÇÒ´ç.
	char* pName = (char*)malloc(strlen(Buffer) + 1);

	// ** Buffer °¡ ¹ÞÀº ¹®ÀÚ¿­À» pName À¸·Î º¹»ç.
	strcpy(pName, Buffer);

	// ** ¹ÝÈ¯.
	return pName;
}

void shop()
{
	short startX = 40;
	short startY = 2;

	const int WP = 0;//¹«±â
	const int PT = 1;//¹æ¾î±¸
	const int USE = 2; //¼Ò¸ðÇ°

	int page = 0;
	int catal = 0;

	SetCursor(startX + 10, startY + 2);
	printf_s("------ »óÁ¡ ------");

	while (true)
	{
		showFrame(50, 22, startX, startY);

		page = page % 3;

		if (page == WP)
		{
			catal = catal % 3;
			SetCursor(startX + 25, startY + 2);
			printf_s("        * ¹«±â·ù *");

			for (int i = 0; i < sizeof(weapons) / sizeof(WEAPON); i++)
			{
				if (weapons[i].att != NULL)
				{
					SetCursor(startX + 2, startY + 4 + (i * 4));
					printf_s("*  ÀÌ¸§:%s     ±Ý¾×:%d", weapons[i].item.name, weapons[i].item.price);

					SetCursor(startX + 2, startY + 5 + (i * 4));
					printf_s("   °ø°Ý·Â:%d   ·¹º§Á¦ÇÑ:%d", weapons[i].att, weapons[i].limitLevel);
				}
			}

			SetCursor(startX + 40, startY + 4 + (catal * 4));
			printf_s("<- ");
		}
		else if (page == PT)
		{
			catal = catal % 3;
			SetCursor(startX + 25, startY + 2);
			printf_s("        * ¹æ¾î±¸·ù *");
			for (int i = 0; i < sizeof(protections) / sizeof(PROTECTION); i++)
			{
				if (protections[i].def != NULL)
				{
					SetCursor(startX + 2, startY + 4 + (i * 4));
					printf_s("*  ÀÌ¸§:%s     ±Ý¾×:%d", protections[i].item.name, protections[i].item.price);

					SetCursor(startX + 2, startY + 5 + (i * 4));
					printf_s("   ¹æ¾î·Â:%d   ·¹º§Á¦ÇÑ:%d", protections[i].def, protections[i].limitLevel);
				}
			}

			SetCursor(startX + 40, startY + 4 + (catal * 4));
			printf_s("<- ");
		}
		else if (page == USE)
		{
			catal = catal % 6;
			SetCursor(startX + 25, startY + 2);
			printf_s("        * ¼Ò¸ðÇ° *");
			for (int i = 0; i < sizeof(useitems) / sizeof(USETEM); i++)
			{
				if (useitems[i].hpRegain != NULL)
				{
					SetCursor(startX + 2, startY + 4 + (i * 2));
					printf_s("*  ÀÌ¸§:%s   Ã¼·ÂÈ¸º¹¾ç:%d   ±Ý¾×:%d", useitems[i].item.name, useitems[i].hpRegain, useitems[i].item.price);
				}
			}

			SetCursor(startX + 40, startY + 4 + (catal * 4));
			printf_s("<- ");
		}

		SetCursor(startX + 2, startY + 20);
		printf_s("1. ±¸ÀÔ  2. »óÁ¡ ³ª°¡±â ");

		char c = _getch();
		if (c == 13)break;

		if (c == 77)
		{
			page++;
		}
		else if (c == 75)
		{
			if (page != 0)page--;
		}
		else if (c == 72)
		{
			if (catal != 0)catal--;
		}
		else if (c == 80)
		{
			catal++;
		}
		else if (c == 'a') //±¸ÀÔ
		{
			if (page == WP)
			{
				buy(weapons[catal].item);
			}
			else if (page == PT)
			{
				buy(protections[catal].item);
			}
			else if (page == USE)
			{
				buy(useitems[catal].item);
			}
		}

	}


}

int buy(ITEM item)//±¸¸Å ¼º°øÇÏ¸é 1 ½ÇÆÐÇÏ¸é 0 ¹ÝÈ¯
{
	if (player.gold >= item.price)
	{
		InputInven(item);
		player.gold -= item.price;
		printf_s("      ±¸¸Å¼º°ø");
		Sleep(500);
		return 1;
	}
	else return 0;

}

void useTemUse(ITEM item, int index)
{
	if (item.itemType == Item_Use) //¼Ò¸ð Ç°ÀÌ¸é
	{
		int hpRe = useitems[item.itemNum].hpRegain;
		int MpRe = useitems[item.itemNum].MpRegain;

		if (player.currHp < player.currHp + hpRe)
			player.currHp = player.status.hp;
		else
			player.currHp += hpRe;
	}
}

void useItem(int invenIndex) //¾ÆÀÌÅÛ »ç¿ë ÇÔ¼ö
{
	if (inventory[invenIndex].item.itemType == Item_Use)
	{
		player.currHp = useitems[inventory[invenIndex].item.itemNum].hpRegain;
	}
}